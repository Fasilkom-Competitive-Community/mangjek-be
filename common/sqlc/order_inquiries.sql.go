// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: order_inquiries.sql

package sqlc

import (
	"context"
	"time"
)

const createOrderInquiry = `-- name: CreateOrderInquiry :one
INSERT INTO order_inquiries ( user_id
                            , price
                            , distance
                            , duration
                            , origin_lat
                            , origin_long
                            , origin_address
                            , destination_lat
                            , destination_long
                            , destination_address
                            , routes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id
`

type CreateOrderInquiryParams struct {
	UserID             string  `db:"user_id"`
	Price              int64   `db:"price"`
	Distance           int32   `db:"distance"`
	Duration           int32   `db:"duration"`
	OriginLat          float64 `db:"origin_lat"`
	OriginLong         float64 `db:"origin_long"`
	OriginAddress      string  `db:"origin_address"`
	DestinationLat     float64 `db:"destination_lat"`
	DestinationLong    float64 `db:"destination_long"`
	DestinationAddress string  `db:"destination_address"`
	Routes             string  `db:"routes"`
}

func (q *Queries) CreateOrderInquiry(ctx context.Context, arg CreateOrderInquiryParams) (string, error) {
	row := q.db.QueryRow(ctx, createOrderInquiry,
		arg.UserID,
		arg.Price,
		arg.Distance,
		arg.Duration,
		arg.OriginLat,
		arg.OriginLong,
		arg.OriginAddress,
		arg.DestinationLat,
		arg.DestinationLong,
		arg.DestinationAddress,
		arg.Routes,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteOrderInquiry = `-- name: DeleteOrderInquiry :exec
DELETE
FROM order_inquiries
WHERE id = $1
`

func (q *Queries) DeleteOrderInquiry(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOrderInquiry, id)
	return err
}

const getOrderInquiry = `-- name: GetOrderInquiry :one
SELECT id
     , user_id
     , price
     , distance
     , duration
     , origin_lat
     , origin_long
     , origin_address
     , destination_lat
     , destination_long
     , destination_address
     , routes
     , created_at
     , updated_at
FROM order_inquiries
WHERE id = $1
`

type GetOrderInquiryRow struct {
	ID                 string    `db:"id"`
	UserID             string    `db:"user_id"`
	Price              int64     `db:"price"`
	Distance           int32     `db:"distance"`
	Duration           int32     `db:"duration"`
	OriginLat          float64   `db:"origin_lat"`
	OriginLong         float64   `db:"origin_long"`
	OriginAddress      string    `db:"origin_address"`
	DestinationLat     float64   `db:"destination_lat"`
	DestinationLong    float64   `db:"destination_long"`
	DestinationAddress string    `db:"destination_address"`
	Routes             string    `db:"routes"`
	CreatedAt          time.Time `db:"created_at"`
	UpdatedAt          time.Time `db:"updated_at"`
}

func (q *Queries) GetOrderInquiry(ctx context.Context, id string) (GetOrderInquiryRow, error) {
	row := q.db.QueryRow(ctx, getOrderInquiry, id)
	var i GetOrderInquiryRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Price,
		&i.Distance,
		&i.Duration,
		&i.OriginLat,
		&i.OriginLong,
		&i.OriginAddress,
		&i.DestinationLat,
		&i.DestinationLong,
		&i.DestinationAddress,
		&i.Routes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
