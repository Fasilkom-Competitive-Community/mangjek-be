// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: orders.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders ( driver_id
                  , user_id
                  , price
                  , distance
                  , notes
                  , src_lat
                  , src_lng
                  , dst_lat
                  , dst_lng)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateOrderParams struct {
	DriverID int32          `db:"driver_id"`
	UserID   string         `db:"user_id"`
	Price    int32          `db:"price"`
	Distance int32          `db:"distance"`
	Notes    sql.NullString `db:"notes"`
	SrcLat   float64        `db:"src_lat"`
	SrcLng   float64        `db:"src_lng"`
	DstLat   float64        `db:"dst_lat"`
	DstLng   float64        `db:"dst_lng"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.DriverID,
		arg.UserID,
		arg.Price,
		arg.Distance,
		arg.Notes,
		arg.SrcLat,
		arg.SrcLng,
		arg.DstLat,
		arg.DstLng,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE
FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id
     , driver_id
     , user_id
     , price
     , distance
     , notes
     , src_lat
     , src_lng
     , dst_lat
     , dst_lng
     , created_at
     , updated_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.UserID,
		&i.Price,
		&i.Distance,
		&i.Notes,
		&i.SrcLat,
		&i.SrcLng,
		&i.DstLat,
		&i.DstLng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id
     , driver_id
     , user_id
     , price
     , distance
     , notes
     , src_lat
     , src_lng
     , dst_lat
     , dst_lng
     , created_at
     , updated_at
FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.UserID,
			&i.Price,
			&i.Distance,
			&i.Notes,
			&i.SrcLat,
			&i.SrcLng,
			&i.DstLat,
			&i.DstLng,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
