// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: drivers.sql

package sqlc

import (
	"context"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers ( user_id
                    , police_number
                    , vehicle_model
                    , vehicle_type
                    , nik
                    , address
                    , is_sim_active
                    , is_stnk_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id
`

type CreateDriverParams struct {
	UserID       string `db:"user_id"`
	PoliceNumber string `db:"police_number"`
	VehicleModel string `db:"vehicle_model"`
	VehicleType  string `db:"vehicle_type"`
	Nik          string `db:"nik"`
	Address      string `db:"address"`
	IsSimActive  bool   `db:"is_sim_active"`
	IsStnkActive bool   `db:"is_stnk_active"`
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (int32, error) {
	row := q.db.QueryRow(ctx, createDriver,
		arg.UserID,
		arg.PoliceNumber,
		arg.VehicleModel,
		arg.VehicleType,
		arg.Nik,
		arg.Address,
		arg.IsSimActive,
		arg.IsStnkActive,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteDriver = `-- name: DeleteDriver :exec
DELETE
FROM drivers
WHERE id = $1
`

func (q *Queries) DeleteDriver(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteDriver, id)
	return err
}

const getDriver = `-- name: GetDriver :one
SELECT id
     , user_id
     , police_number
     , vehicle_model
     , vehicle_type
     , nik
     , address
     , is_sim_active
     , is_stnk_active
     , created_at
     , updated_at
FROM drivers
WHERE id = $1
`

func (q *Queries) GetDriver(ctx context.Context, id int32) (Driver, error) {
	row := q.db.QueryRow(ctx, getDriver, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PoliceNumber,
		&i.VehicleModel,
		&i.VehicleType,
		&i.Nik,
		&i.Address,
		&i.IsSimActive,
		&i.IsStnkActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDriverByUserID = `-- name: GetDriverByUserID :one
SELECT id
     , user_id
     , police_number
     , vehicle_model
     , vehicle_type
     , nik
     , address
     , is_sim_active
     , is_stnk_active
     , created_at
     , updated_at
FROM drivers
WHERE user_id = $1
`

func (q *Queries) GetDriverByUserID(ctx context.Context, userID string) (Driver, error) {
	row := q.db.QueryRow(ctx, getDriverByUserID, userID)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PoliceNumber,
		&i.VehicleModel,
		&i.VehicleType,
		&i.Nik,
		&i.Address,
		&i.IsSimActive,
		&i.IsStnkActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDrivers = `-- name: ListDrivers :many
SELECT id
     , user_id
     , police_number
     , vehicle_model
     , vehicle_type
     , nik
     , address
     , is_sim_active
     , is_stnk_active
     , created_at
     , updated_at
FROM drivers
`

func (q *Queries) ListDrivers(ctx context.Context) ([]Driver, error) {
	rows, err := q.db.Query(ctx, listDrivers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Driver{}
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PoliceNumber,
			&i.VehicleModel,
			&i.VehicleType,
			&i.Nik,
			&i.Address,
			&i.IsSimActive,
			&i.IsStnkActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriver = `-- name: UpdateDriver :one
UPDATE drivers
SET police_number  = $2
  , vehicle_model  = $3
  , vehicle_type   = $4
  , nik            = $5
  , address        = $6
  , is_sim_active  = $7
  , is_stnk_active = $8
WHERE user_id = $1
RETURNING id
`

type UpdateDriverParams struct {
	UserID       string `db:"user_id"`
	PoliceNumber string `db:"police_number"`
	VehicleModel string `db:"vehicle_model"`
	VehicleType  string `db:"vehicle_type"`
	Nik          string `db:"nik"`
	Address      string `db:"address"`
	IsSimActive  bool   `db:"is_sim_active"`
	IsStnkActive bool   `db:"is_stnk_active"`
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateDriver,
		arg.UserID,
		arg.PoliceNumber,
		arg.VehicleModel,
		arg.VehicleType,
		arg.Nik,
		arg.Address,
		arg.IsSimActive,
		arg.IsStnkActive,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
