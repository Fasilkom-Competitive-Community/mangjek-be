// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: payments.sql

package sqlc

import (
	"context"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments ( id
                     , amount
                     , status
                     , method
                     , qr_str)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreatePaymentParams struct {
	ID     string  `db:"id"`
	Amount float64 `db:"amount"`
	Status string  `db:"status"`
	Method string  `db:"method"`
	QrStr  string  `db:"qr_str"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (string, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.Amount,
		arg.Status,
		arg.Method,
		arg.QrStr,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getPayment = `-- name: GetPayment :one
SELECT id
     , amount
     , status
     , method
     , qr_str
     , created_at
     , updated_at
FROM payments
WHERE id = $1
`

type GetPaymentRow struct {
	ID        string    `db:"id"`
	Amount    float64   `db:"amount"`
	Status    string    `db:"status"`
	Method    string    `db:"method"`
	QrStr     string    `db:"qr_str"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

func (q *Queries) GetPayment(ctx context.Context, id string) (GetPaymentRow, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i GetPaymentRow
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Status,
		&i.Method,
		&i.QrStr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatusToPaid = `-- name: UpdatePaymentStatusToPaid :one
UPDATE payments
SET status     = $2
  , updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id
`

type UpdatePaymentStatusToPaidParams struct {
	ID     string `db:"id"`
	Status string `db:"status"`
}

func (q *Queries) UpdatePaymentStatusToPaid(ctx context.Context, arg UpdatePaymentStatusToPaidParams) (string, error) {
	row := q.db.QueryRow(ctx, updatePaymentStatusToPaid, arg.ID, arg.Status)
	var id string
	err := row.Scan(&id)
	return id, err
}
